<?php
namespace MultiTierArchitecture\Boundary\Definition;

/**
 * Response class used by use cases to return response
 *
 * @category Boundary
 * @package  MultiTierArchitecture\Boundary\Definition
 * @author   Arkan M. Gerges <arkan.m.gerges@gmail.com>
 * @version  GIT: $Id:$
 */
abstract class ResponseAbstract
{
    const STATUS_SUCCESS = 1;
    const STATUS_FAIL    = 2;

    /** @var array  $sourceResponse  The response that is generated by the source (e.g. api source or db) and
     *                               be put into an array
     */
    private $sourceResponse   = [];
    private $messages         = [];
    private $headers          = null;
    private $result           = null;
    /** @var array This can be used as universal codes, it can be used as error codes from use case constants */
    private $codes            = [];
    private $status           = null;
    private $totalResultCount = 0;

    /**
     * Set messages (error, or other messages)
     *
     * @param array  $messages  Array of messages used to send for the controllers or other part of the system
     *
     * @return void
     */
    public function setMessages($messages)
    {
        $this->messages = $messages;
    }

    /**
     * Get codes array
     *
     * @return array Codes that are set
     */
    public function getCodes()
    {
        return $this->codes;
    }

    /**
     * Set codes array
     *
     * @param array  $codes  Codes that are used as a universal way to set codes
     *
     * @return void
     */
    public function setCodes($codes)
    {
        $this->codes = $codes;
    }

    /**
     * Get the messages that are set
     *
     * @return array Messages that were set
     */
    public function getMessages()
    {
        return $this->messages;
    }

    /**
     * Verify if there are messages
     *
     * @return bool true if there are messages, otherwise false
     */
    public function hasMessages()
    {
        return count($this->messages) > 0;
    }

    /**
     * Set result for this response object
     *
     * @param mixed  $result  Any result can be set to this object
     *
     * @return void
     */
    public function setResult($result)
    {
        $this->result = $result;
    }

    /**
     * Get result set to this object
     *
     * @return mixed Result that is set to this object
     */
    public function getResult()
    {
        return $this->result;
    }

    /**
     * Set the status of the response
     *
     * @param int  $status  Status code of this response
     *
     * @return void
     */
    public function setStatus($status)
    {
        $this->status = $status;
    }

    /**
     * Get status of this response object
     *
     * @return int Status of this object
     */
    public function getStatus()
    {
        return $this->status;
    }

    /**
     * Get the number of results
     *
     * @return int Number of results
     */
    public function getTotalResultCount()
    {
        return $this->totalResultCount;
    }

    /**
     * Set number of results
     *
     * @param int  $resultCount  Number of results
     *
     * @return void
     */
    public function setTotalResultCount($resultCount)
    {
        $this->totalResultCount = $resultCount;
    }

    /**
     * Get source response that is generated by the source like api or db and encapsulated into array
     *
     * @return array Full response from the source
     */
    public function getSourceResponse()
    {
        return $this->sourceResponse;
    }

    /**
     * Set the response of the source encapsulated into array, this can be used by the source who
     * generates the response like api or db
     *
     * @param array  $sourceResponse  Source array generated by the source like api or db and encapsulated into
     *                                array
     *
     * @return void
     */
    public function setSourceResponse($sourceResponse)
    {
        if (is_array($sourceResponse)) {
            $this->sourceResponse = $sourceResponse;
        }
        else {
            $this->sourceResponse = [];
        }
    }
}
